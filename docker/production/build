#!/bin/sh

SCRIPT_DIR=$(dirname "$(realpath "$0")") # Dynamically determine the directory where the build file is located
SOURCE="$SCRIPT_DIR/../../"              # Define path to the root
DESTINATION="$SCRIPT_DIR/app"            # Define destination for the copied files
IMAGE_PATH="$SCRIPT_DIR/images"          # Directory where the images will be exported after build
PROJECT_NAME="laravel12-template"        # Project name to be used for the image tag
PROJECT_VERSION="v1"                     # Build version

# Create paths for the build flow
mkdir -p "$DESTINATION"
mkdir -p "$IMAGE_PATH"

# Execute rsync with excludes and includes flags
rsync -avq \
    --exclude='.git' \
    --exclude='**/*.log' \
    --include='bootstrap/cache/.gitignore' \
    --exclude='bootstrap/cache/**' \
    --exclude='docker' \
    --exclude='node_modules' \
    --exclude='public/build' \
    --include='storage/logs/.gitignore' \
    --exclude='storage/logs/**' \
    --include='storage/framework/cache/.gitignore' \
    --include='storage/framework/cache/data' \
    --include='storage/framework/cache/data/.gitignore' \
    --exclude='storage/framework/cache/**' \
    --include='storage/framework/sessions/.gitignore' \
    --exclude='storage/framework/sessions/**' \
    --include='storage/framework/testing/.gitignore' \
    --exclude='storage/framework/testing/**' \
    --include='storage/framework/views/.gitignore' \
    --exclude='storage/framework/views/**' \
    --include='storage/logs/.gitignore' \
    --exclude='storage/logs/**' \
    --exclude='vendor' \
    --include='.env.example' \
    --exclude='.env*' \
    --exclude='composer.lock' \
    --exclude='docker*' \
    --exclude='package-lock.json' \
    --exclude='README.md' \
    "$SOURCE" "$DESTINATION"

# Starting the image build
docker build -f "$SCRIPT_DIR/Dockerfile" -t "$PROJECT_NAME:$PROJECT_VERSION" --rm --no-cache "$SCRIPT_DIR"

# Export the image to a .tar file
docker save -o "$IMAGE_PATH/$PROJECT_NAME-$PROJECT_VERSION.tar" "$PROJECT_NAME:$PROJECT_VERSION"

# Removing folder after build is finished
rm -rf "$DESTINATION"

# Finalization
exec echo "Image successfully exported to directory $IMAGE_PATH"
